#!/usr/bin/make -f

.DEFAULT_GOAL: are-system-root-certs-reputable

# Path from https://github.com/Homebrew/homebrew-core/blob/dc16dfe0da7ecfd12a5973052af174dc068f9ff8/Formula/ca-certificates.rb#L33
SYS_KEYCHAIN = /Library/Keychains/System.keychain
# Path from https://github.com/Homebrew/homebrew-core/blob/dc16dfe0da7ecfd12a5973052af174dc068f9ff8/Formula/ca-certificates.rb#L34
SYS_ROOT_KEYCHAIN = /System/Library/Keychains/SystemRootCertificates.keychain

# Formula [renames as `cacert.pem`](https://github.com/Homebrew/homebrew-core/blob/dc16dfe0da7ecfd12a5973052af174dc068f9ff8/Formula/ca-certificates.rb#L18).
BREW_CACERT_PEM := $(shell echo "$$(brew --prefix ca-certificates)"/share/ca-certificates/cacert.pem)
MOZILLA_PEM = $(BREW_CACERT_PEM)

.PHONY: are-system-root-certs-reputable
are-system-root-certs-reputable: \
	are-there-no-root-system-certs \
	are-there-no-system-root-certs-not-among-strict-mozilla-certs \
	;

.PHONY: verbose-root-system-certs
verbose-root-system-certs:
	$(error TODO $@)

.PHONY: verbose-system-root-certs-not-among-strict-mozilla-certs
verbose-system-root-certs-not-among-strict-mozilla-certs: SHELL = $(BASH)
verbose-system-root-certs-not-among-strict-mozilla-certs:
	$(bash_verbose_system_root_certs_not_among_strict_mozilla_certs)
	$(warning Non-strict $@)

.PHONY: mozilla-certs-not-among-system-root-certs
mozilla-certs-not-among-system-root-certs:
	$(error TODO $@)

.PHONY: describe-keychain-cert-by-sha1-%
describe-keychain-cert-by-sha1-%: SHELL = $(BASH)
describe-keychain-cert-by-sha1-%:
	: "$${KEYCHAIN:?}"
	$(call bash_describe_keychain_cert_by_sha1,"$${KEYCHAIN:?}","$*")

# ==== Internal Rules and Variables ====

BASH = /bin/bash
# Requires bash for process substitution (`<(list)`).
bash_exit = { sh -s < <(echo "exit $(1)"); }

SECURITY = /usr/bin/security
# Certificate retrieval from https://github.com/Homebrew/homebrew-core/blob/dc16dfe0da7ecfd12a5973052af174dc068f9ff8/Formula/ca-certificates.rb#L37
sh_list_keychain_certs_as_pem = \
	{ $(SECURITY) find-certificate -a -p $(1); }
sh_list_keychain_certs_with_sha1 = \
	{ $(SECURITY) find-certificate -a -Z $(1); }
SECURITY_SHA1_LINE_PREFIX = SHA-1 
SECURITY_ABSENT_CHAR = \0
# Refs:
# * [How to separate based on string (rather than char), and how to iterate over fields](https://unix.stackexchange.com/questions/378547/split-a-string-by-some-separator-in-bash/378550#378550).
# * [How to conditionally print field](https://www.tek-tips.com/viewthread.cfm?qid=1459823#post-5570064).
sh_find_keychain_cert_by_sha1 = \
	{ awk \
		-F '$(SECURITY_SHA1_LINE_PREFIX)' \
		-v RS='$(SECURITY_ABSENT_CHAR)' \
		'{ for (i = 1; i <= NF; i++) if ($$i ~ /'$(1)'/) print $$i; else continue }'; }

SSL = /usr/bin/openssl
# Fingerprint printing from https://github.com/Homebrew/homebrew-core/blob/dc16dfe0da7ecfd12a5973052af174dc068f9ff8/Formula/ca-certificates.rb#L94-L97
# Sample output: `SHA1 Fingerprint=01:23:45:67:89:AB:CD:EF:00:00:00:00:00:00:00:00:00:00:00:00`.
sh_pem_fingerprint = { $(SSL) x509 -fingerprint $(1) -noout; }
# Purpose filtering from https://github.com/Homebrew/homebrew-core/blob/dc16dfe0da7ecfd12a5973052af174dc068f9ff8/Formula/ca-certificates.rb#L55-L61
# Output is:
# * Line `^SHA1 Fingerprint=...`.
# * Then `Certificate purposes:`. Then several lines, among which:
#   * `^SSL server CA : No$`. Or
#   * `^SSL server CA : Yes$`. Or
#   * `^SSL server CA : Yes (WARNING code=...)$`.
sh_pem_fingerprint_and_purpose = { $(SSL) x509 -fingerprint $(1) -purpose -noout; }
SSL_FP_DELIM = =
SSL_FP_FIELD = 2
SSL_FP_SEP = :
SSL_FP_SHA1_PREFIX = SHA1 Fingerprint
SSL_SERVER_CA_PREFIX = SSL server CA : Yes
# SHA-1 for interoperability with `/usr/bin/security find-certificate` option `-Z`.
SSL_DIGEST_SHA1 = -sha1
# Sample output: `SHA1 Fingerprint=01:23:45:67:89:AB:CD:EF:00:00:00:00:00:00:00:00:00:00:00:00`.
sh_pem_fingerprint_sha1 = $(call sh_pem_fingerprint,$(SSL_DIGEST_SHA1))
sh_pem_fingerprint_sha1_and_purpose = $(call sh_pem_fingerprint_and_purpose,$(SSL_DIGEST_SHA1))
# Sample input: `SHA1 Fingerprint=01:23:45:67:89:AB:CD:EF:00:00:00:00:00:00:00:00:00:00:00:00`.
# Sample output: `0123456789ABCDEF000000000000000000000000`.
# Requires bash for option `pipefail`.
bash_normalize_fingerprint_sha1 = \
	( set -o pipefail; \
		cut -d '$(SSL_FP_DELIM)' -f $(SSL_FP_FIELD) \
			| tr -d '$(SSL_FP_SEP)'; )
# Sample output: `0123456789ABCDEF000000000000000000000000`.
# Requires bash for option `pipefail`.
bash_pem_sha1 = \
	( set -o pipefail; \
		$(sh_pem_fingerprint_sha1) \
			| $(bash_normalize_fingerprint_sha1); )
# How to process multiple certificates in one file is from https://unix.stackexchange.com/questions/696224/using-openssl-to-display-all-certificates-of-a-pem-file/696244#696244
# Example of line from the output: `0123456789ABCDEF000000000000000000000000`.
bash_pem_sha1s = { while $(bash_pem_sha1); do :; done 2>/dev/null; }
# Experiment confirms that casing seems to be `SSL server CA : Yes` as per https://github.com/Homebrew/homebrew-core/blob/dc16dfe0da7ecfd12a5973052af174dc068f9ff8/Formula/ca-certificates.rb#L61 , not "SSL Server CA" as per https://manpages.debian.org/bullseye/openssl/x509.1ssl.en.html
# Sample output: `0123456789ABCDEF000000000000000000000000`.
# Sample output: nothing (if not CA).
bash_pem_root_sha1 = \
	( set -o pipefail; \
		$(sh_pem_fingerprint_sha1_and_purpose) \
			| ( X="$$(grep -i -e '^$(SSL_FP_SHA1_PREFIX)' -e '^$(SSL_SERVER_CA_PREFIX)')"; \
				if { echo "$${X:?}" | grep -q -i -e '^$(SSL_SERVER_CA_PREFIX)'; }; then \
					{ echo "$${X:?}" | grep -i -e '^$(SSL_FP_SHA1_PREFIX)'; }; \
				fi; ) \
			| $(bash_normalize_fingerprint_sha1); )
# Example of line from the output: `0123456789ABCDEF000000000000000000000000`.
bash_pem_root_sha1s = { while $(bash_pem_root_sha1); do :; done 2>/dev/null; }

# TODO Certificate com.apple.kerberos.kdc is [known](https://support.apple.com/en-gb/TS1452).
.PHONY: are-there-no-root-system-certs
# Requires bash for process substitution (`<(list)`).
are-there-no-root-system-certs: SHELL = $(BASH)
are-there-no-root-system-certs:
	diff -u \
		/dev/null \
		<($(sh_root_system_certs))

sh_root_system_certs = :
.PHONY: root-system-certs
root-system-certs:
	$(warning TODO $@)

.PHONY: are-there-no-system-root-certs-not-among-strict-mozilla-certs
are-there-no-system-root-certs-not-among-strict-mozilla-certs: SHELL = $(BASH)
are-there-no-system-root-certs-not-among-strict-mozilla-certs:
	$(bash_system_root_certs_not_among_strict_mozilla_certs)
	$(warning Non-strict $@)

# TODO Make strict.
# Example of line from the output: `0123456789ABCDEF000000000000000000000000`.
bash_strict_mozilla_certs = \
	{ $(bash_pem_sha1s) \
		<"$(MOZILLA_PEM)"; }
# Example of line from the output: `0123456789ABCDEF000000000000000000000000`.
# Requires bash for process substitution (`<(list)`).
bash_keychain_root_certs = \
	{ $(bash_pem_root_sha1s) \
		< <($(call sh_list_keychain_certs_as_pem,$(1))); }
# Example of line from the output: `0123456789ABCDEF000000000000000000000000`.
# Exit status is 1 if no lines selected, 0 if any.
# Requires bash for process substitution (`<(list)`).
bash_grep_keychain_root_certs_not_among_strict_mozilla_certs = \
	{ grep -F \
		-v \
		-f <($(bash_strict_mozilla_certs)) \
		<($(call bash_keychain_root_certs,$(1))); }
# Starts shell in order to scope variables.
# Example of line from the output: `0123456789ABCDEF000000000000000000000000`.
# Exit status is 0 if no certificates not matching, 1 if any.
bash_keychain_root_certs_not_among_strict_mozilla_certs = \
	( UL="$$( $(call bash_grep_keychain_root_certs_not_among_strict_mozilla_certs,$(1)) )"; \
		S=$$?; \
		case $${S:?} in \
			(1) $(call bash_exit,0) \
			    ;; \
			(0) echo "$${UL:?}"; \
			    $(call bash_exit,1) \
			    ;; \
			(*) $(call bash_exit,$${S:?}) \
			    ;; \
		esac; )
# Select system root certificates not matching any of the Mozilla CA certificates. There should be none.
# Example of line from the output: `0123456789ABCDEF000000000000000000000000`.
bash_system_root_certs_not_among_strict_mozilla_certs = \
	$(call bash_keychain_root_certs_not_among_strict_mozilla_certs,"$(SYS_ROOT_KEYCHAIN)")
.PHONY: system-root-certs-not-among-strict-mozilla-certs
system-root-certs-not-among-strict-mozilla-certs: SHELL = $(BASH)
system-root-certs-not-among-strict-mozilla-certs:
	@$(bash_system_root_certs_not_among_strict_mozilla_certs)
	$(warning Non-strict $@)

# Requires bash for process substitution (`<(list)`).
bash_describe_keychain_root_certs_not_among_strict_mozilla_certs = \
	( DB="$$( $(call sh_list_keychain_certs_with_sha1,$(1)) )"; \
		for X in $$( $(call bash_keychain_root_certs_not_among_strict_mozilla_certs,$(1)) ); do \
			{ $(call sh_find_keychain_cert_by_sha1,"$${X:?}") < <(echo "$${DB:?}"); }; \
		done; )
bash_verbose_keychain_root_certs_not_among_strict_mozilla_certs = \
	$(call bash_describe_keychain_root_certs_not_among_strict_mozilla_certs,$(1))
bash_verbose_system_root_certs_not_among_strict_mozilla_certs = \
	$(call bash_verbose_keychain_root_certs_not_among_strict_mozilla_certs,"$(SYS_ROOT_KEYCHAIN)")
# Requires bash for process substitution (`<(list)`).
bash_describe_keychain_cert_by_sha1 = \
	( DB="$$( $(call sh_list_keychain_certs_with_sha1,$(1)) )"; \
		{ $(call sh_find_keychain_cert_by_sha1,"$(2)") < <(echo "$${DB:?}"); }; )

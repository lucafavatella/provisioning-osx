#!/bin/sh

## Copyright (C) 2015 Luca Favatella <slackydeb@gmail.com>

## Has the specified brew formula got a pourable bottle?
##
## Exits with code:
## * 0 if formula exists and has a pourable bottle;
## * 1 if formula does not exist or has not a pourable bottle.
has_pb() {
    printf \
        "require 'formula_installer'; fn = '%s'; f = fn.f rescue abort('maybe formula ' + fn + ' does not exist?'); if FormulaInstaller.new(f).pour_bottle? then exit() else abort('bottle of formula ' + f.full_name + ' not pourable') end" \
        "${1:?}" \
        | { brew irb > /dev/null; }
}

## Dual of `has_pb`.
## TODO Restore relocability of bottles.
had_pb() {
    printf \
        "require 'formula_installer'; fn = '%s'; f = fn.f rescue abort('maybe formula ' + fn + ' does not exist?'); if FormulaInstaller.new(f).pour_bottle? then abort('bottle of formula ' + f.full_name + ' pourable') else exit() end" \
        "${1:?}" \
        | { brew irb > /dev/null; }
}

ROOT_DIR="$(cd $(dirname $0)/.. && pwd)"

brew cask install Caskroom/cask/iterm2 || exit 1 ## No Sixel support (VT340) - [ref](https://gitlab.com/gnachman/iterm2/issues/3240).
{ had_pb tmux && brew install tmux; } || exit 1
brew install bash-completion || exit 1
brew install git || exit 1 ## For git-completion.
{ brew install emacs --with-modules && \
      if test -e "${HOME}/.emacs"; then
          if test -e "${HOME}/.emacs.d"; then
              "$(brew --prefix emacs)/bin/emacs" \
                  --batch \
                  --eval "(require 'package)" -f package-initialize \
                  --eval "(require 'epl)" -f epl-refresh -f epl-upgrade
          fi
      fi; } || exit 1

## Refs:
## * curl `-z`, curl `-w`: http://blog.yjl.im/2012/03/downloading-only-when-modified-using.html
## * `If-Modified-Since` HTTP header field: https://tools.ietf.org/html/rfc7232#section-3.3
## * `304` HTTP status code: https://tools.ietf.org/html/rfc7232#section-4.1
##
## In alternative to curl `-z <file>` option, modification date
## (mtime) of file could be retrieved using (non-POSIX) `stat`
## e.g. `stat -f '%Sm' -t '%Y%m%d%H%M%S' ...`.
##
## If curl `-z <date expression>` option needed, related standard for
## expressing time is RFC 5322.
(
    FfD="${HOME}/homebrew-cask/Caskroom/firefoxdeveloperedition/latest" ## HACK
    FfUrl="https://download.mozilla.org/?product=firefox-aurora-latest-ssl&os=osx&lang=en-US" ## HACK Ref https://github.com/caskroom/homebrew-versions/commit/a3c21d439ba0fd09419ef720b843708980f6171f#diff-482097f2c80e9571c53aab608b5eb705L5
    test -d "$FfD" || echo "Firefox-related directory '$FfD' not found: first time installation? Continuing." >&2
    FfC=$(curl -s -S -L --head -o /dev/null -w '%{http_code}' -z "$FfD" "$FfUrl") || { echo "Check for Firefox Developer Edition failed. Exiting." >&2; exit 1; }
    case "${FfC:?}" in
        304) echo "No more recent Firefox Developer Edition to install. Skipping." >&2;;
        200) brew cask install --force caskroom/versions/firefoxdeveloperedition;;
        *) echo "Check for Firefox Developer Edition returned unknown HTTP status code '${FfC}'. Exiting." >&2; exit 1
esac
) || exit 1

#brew install packer || exit 1
brew install docker || exit 1
brew install docker-machine || exit 1 ## Downloads boot2docker.iso
#brew install docker-machine-driver-xhyve || exit 1 ## docker-machine does not adhere to the specified driver. See https://github.com/zchee/docker-machine-driver-xhyve/issues/128
{ has_pb ansible && brew install --build-from-source ansible; } || exit 1
#brew install ssh-copy-id || exit 1

#brew install android-platform-tools || exit 1 ## adb
#brew install android-sdk || exit 1 ## For IntelliJ.
#brew cask install android-studio || exit 1 ## From [IntelliJ IDEA and Android Studio FAQ](http://blog.jetbrains.com/idea/2013/05/intellij-idea-and-android-studio-faq/): "If Iâ€™m already a user of IntelliJ IDEA, do I need to switch to Android Studio for Android development? No. Android Studio is focused specifically on Android development and provides streamlined environment and project setup, but otherwise all of its features are available in IntelliJ IDEA."
brew install autoconf || exit 1
#brew install bats || exit 1
brew install checkbashisms || exit 1
#brew install cmake || exit 1
#brew install cvs || exit 1
#brew install cvs2svn || exit 1
#brew install dash || exit 1
#brew install gcc || exit 1
#brew install gdb || exit 1
{ { brew rm --ignore-dependencies ctags || true; } && { { brew rm --ignore-dependencies universal-ctags/universal-ctags/universal-ctags || true; } && brew install --HEAD universal-ctags/universal-ctags/universal-ctags; } && brew install lucafavatella/core/global --with-universal-ctags --with-pygments && { cat $(brew --prefix global)/share/gtags/gtags.conf | sed 's/^	:tc=native:$/	:tc=pygments:/' > $(brew --prefix)/etc/gtags.conf; }; } || exit 1 ## After many universal-ctags parsers support references, pygments can be dropped (and maybe GNU GLOBAL - relying on universal-ctags output for both definitions and references). Refs https://github.com/universal-ctags/ctags/pull/569#issuecomment-156300213 http://cvs.savannah.gnu.org/viewvc/global/global/configure.ac?r1=1.178&r2=1.179
{ had_pb ghc; } || exit 1 # && brew install ghc && brew install cabal-install && PATH="$(brew --prefix)/bin:$PATH" cabal update && PATH="$(brew --prefix)/bin:$PATH" cabal install idris; } || exit 1
#brew cask install intellij-idea-ce || exit 1
{ has_pb jq; } || exit 1 # && brew install jq; } || exit 1
brew install kerl || exit 1
#brew install saitoha/sixel/mlterm || exit 1 ## Refs https://en.wikipedia.org/wiki/VT340 https://en.wikipedia.org/wiki/Sixel
#brew install node || exit 1 ## Installs `npm` too.
brew install openssl || exit 1 ## Install openssl - for building Erlang/OTP without skipping the crypto application [on MacOSX >= 10.11](http://erlang.org/pipermail/erlang-questions/2015-October/086386.html).
brew install p7zip || exit 1 ## `7z x` works as a compression-agnostic archive extractor command better than BSD `tar -x` e.g. for `gzip` compression.
#brew install plantuml || exit 1
#brew install pstree || exit 1
#brew install pup || exit 1
{ brew install python && "$(brew --prefix python)/bin/pip" install --upgrade pip setuptools; } || exit 1 ## Ref https://github.com/Homebrew/homebrew/blob/0333865e5d831faa6fd6a414fe19e486898aceba/Library/Formula/python.rb#L321-L322
{ brew install python3 && "$(brew --prefix python3)/bin/pip3" install --upgrade pip setuptools; } || exit 1 ## Ref https://github.com/Homebrew/homebrew/blob/cfcbf92dedb275bdf06597745d9dcd392dcb2fbb/Library/Formula/python3.rb#L314-L315
#{ "$(brew --prefix python)/bin/pip" install numpy && brew install OSGeo/osgeo4mac/qgis2 --without-postgresql; } || exit 1
#brew install rust || exit 1
#brew install shellcheck || exit 1
{ has_pb sqlite; } || exit 1 # && brew install sqlite; } || exit 1
#brew install valgrind || exit 1
#brew install watch || exit 1
{ has_pb wxmac && brew install wxmac; } || exit 1 ## Install wxWidgets - for building Erlang/OTP.

#brew install --with-deps dinkypumpkin/get_iplayer/get_iplayer || exit 1

#brew cask install hipchat || exit 1
#brew cask install libreoffice || exit 1
#brew cask install vlc || exit 1

#!/bin/sh

## Has the specified brew formula got a pourable bottle?
##
## Exits with code:
## * 0 if formula exists and has a pourable bottle;
## * 1 if formula does not exist or has not a pourable bottle.
has_pb() {
    printf \
        "require 'formula_installer'; fn = '%s'; f = fn.f rescue abort('maybe formula ' + fn + ' does not exist?'); if FormulaInstaller.new(f).pour_bottle? then exit() else abort('bottle of formula ' + f.full_name + ' not pourable') end" \
        "${1:?}" \
        | { brew irb > /dev/null; }
}

## Dual of `has_pb`.
## TODO Restore relocability of bottles.
had_pb() {
    printf \
        "require 'formula_installer'; fn = '%s'; f = fn.f rescue abort('maybe formula ' + fn + ' does not exist?'); if FormulaInstaller.new(f).pour_bottle? then abort('bottle of formula ' + f.full_name + ' pourable') else exit() end" \
        "${1:?}" \
        | { brew irb > /dev/null; }
}

## Has the CPU got Hypervisor framework support?
##
## Returns (`?`) code:
## * 0 if supported;
## * 1 if not supported.
##
## Exits if OS errs.
##
## Refs:
## * https://developer.apple.com/documentation/hypervisor#overview
## * https://forums.docker.com/t/fatal-error-incompatible-cpu-detected/9162 post #6.
has_hv() {
    case "$(sysctl -n kern.hv_support)" in
        1) return 0 ;;
        0) return 1 ;;
    esac
    exit 71 ## [EX_OSERR](https://www.freebsd.org/cgi/man.cgi?query=sysexits).
}

ROOT_DIR="$(cd $(dirname $0)/.. && pwd)"

brew cask install iterm2 || exit 1 ## No Sixel support (VT340) - [ref](https://gitlab.com/gnachman/iterm2/issues/3240).
{ had_pb tmux && brew install tmux; } || exit 1
brew install bash-completion || exit 1
brew install git || exit 1 ## For git-completion.
{ brew install emacs && \
      if test -e "${HOME}/.emacs"; then
          if test -e "${HOME}/.emacs.d"; then
              "$(brew --prefix emacs)/bin/emacs" \
                  --batch \
                  --eval "(require 'package)" -f package-initialize \
                  --eval "(require 'epl)" -f epl-refresh -f epl-upgrade
          fi
      fi; } || exit 1

brew cask install homebrew/cask-versions/firefox-developer-edition || exit 1

brew cask install docker || exit 1 ## Apparently the Docker daemon cannot be started from CLI hence [Docker.app needs to be run manually](https://docs.docker.com/docker-for-mac/install/#install-and-run-docker-for-mac). It needs privileged access [to install networking components and links to the Docker apps](https://docs.docker.com/docker-for-mac/install/#install-and-run-docker-for-mac).
has_hv; case "$?" in
            1) { brew install docker-machine || exit 1; } ;;
            0) ;;
            *) exit 1 ;;
        esac
{ has_pb ansible && brew install ansible; } || exit 1

#brew cask install android-platform-tools || exit 1 ## adb
#brew install android-sdk || exit 1 ## For IntelliJ.
#brew cask install android-studio || exit 1 ## From [IntelliJ IDEA and Android Studio FAQ](http://blog.jetbrains.com/idea/2013/05/intellij-idea-and-android-studio-faq/): "If Iâ€™m already a user of IntelliJ IDEA, do I need to switch to Android Studio for Android development? No. Android Studio is focused specifically on Android development and provides streamlined environment and project setup, but otherwise all of its features are available in IntelliJ IDEA."
brew install autoconf || exit 1
#brew install checkbashisms || exit 1
#brew install cvs || exit 1
#brew install cvs2svn || exit 1
{ { brew rm --ignore-dependencies ctags || true; } && { { brew rm --ignore-dependencies universal-ctags/universal-ctags/universal-ctags || true; } && brew install --HEAD universal-ctags/universal-ctags/universal-ctags; } && brew install https://raw.githubusercontent.com/lucafavatella/homebrew-core/c130142185d762914e0b6344b49253d7a0c660a2/Formula/global.rb --with-universal-ctags --with-pygments && { cat $(brew --prefix global)/share/gtags/gtags.conf | sed 's/^	:tc=native:$/	:tc=pygments:/' > $(brew --prefix)/etc/gtags.conf; }; } || exit 1 ## After many universal-ctags parsers support references, pygments can be dropped (and maybe GNU GLOBAL - relying on universal-ctags output for both definitions and references). Refs https://github.com/universal-ctags/ctags/pull/569#issuecomment-156300213 http://cvs.savannah.gnu.org/viewvc/global/global/configure.ac?r1=1.178&r2=1.179
{ had_pb ghc; } || exit 1 # && brew install ghc && brew install cabal-install && PATH="$(brew --prefix)/bin:$PATH" cabal update && PATH="$(brew --prefix)/bin:$PATH" cabal install idris; } || exit 1
#brew cask install intellij-idea-ce || exit 1
{ has_pb jq; } || exit 1 # && brew install jq; } || exit 1
brew install kerl || exit 1
#brew install saitoha/sixel/mlterm || exit 1 ## Refs https://en.wikipedia.org/wiki/VT340 https://en.wikipedia.org/wiki/Sixel
brew install openssl || exit 1 ## Install openssl - for building Erlang/OTP without skipping the crypto application [on MacOSX >= 10.11](http://erlang.org/pipermail/erlang-questions/2015-October/086386.html).
brew install p7zip || exit 1 ## `7z x` works as a compression-agnostic archive extractor command better than BSD `tar -x` e.g. for `gzip` compression.
#brew install plantuml || exit 1
#brew install pstree || exit 1
#brew install pup || exit 1
{ brew install python@2 && "$(brew --prefix python@2)/bin/pip" install --upgrade pip setuptools; } || exit 1 ## Ref https://github.com/Homebrew/homebrew-core/blob/8d530a70f8fcf02129d924090d73efbe12ff438d/Formula/python@2.rb#L322-L323
{ brew install python && "$(brew --prefix python)/bin/pip3" install --upgrade pip setuptools wheel; } || exit 1 ## Ref https://github.com/Homebrew/homebrew-core/blob/8d530a70f8fcf02129d924090d73efbe12ff438d/Formula/python.rb#L343-L344
#brew install rust || exit 1
#brew install shellcheck || exit 1
{ has_pb sqlite; } || exit 1 # && brew install sqlite; } || exit 1
#brew install valgrind || exit 1
#brew install watch || exit 1
{ has_pb wxmac && brew install wxmac; } || exit 1 ## Install wxWidgets - for building Erlang/OTP.

#brew cask install libreoffice || exit 1
#brew cask install vlc || exit 1

#brew cask install aerial || exit 1
